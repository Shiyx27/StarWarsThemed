import cv2
import numpy as np
import os
from PIL import Image, ImageDraw

class FilterManager:
    def __init__(self):
        self.filters = {
            'vader': self.apply_vader_mask,
            'stormtrooper': self.apply_stormtrooper_helmet,
            'yoda': self.apply_yoda_ears,
            'lightsaber': self.apply_lightsaber,
            'sith': self.apply_sith_effect,
            'jedi': self.apply_jedi_effect,
            'hologram': self.apply_hologram_effect,
            'force_lightning': self.apply_force_lightning,
            'death_star': self.apply_death_star_background
        }
        self.custom_filters = {}
    
    def apply_filter(self, frame, faces, filter_name):
        """Apply the specified filter to detected faces"""
        if filter_name in self.filters:
            return self.filters[filter_name](frame, faces)
        elif filter_name in self.custom_filters:
            return self.apply_custom_filter(frame, faces, filter_name)
        return frame
    
    def add_custom_filter(self, filter_name, filter_data):
        """Add a custom filter generated by Gemini"""
        self.custom_filters[filter_name] = filter_data
    
    def apply_custom_filter(self, frame, faces, filter_name):
        """Apply a custom Gemini-generated filter"""
        if filter_name not in self.custom_filters:
            return frame
        
        filter_overlay = self.custom_filters[filter_name]
        
        for (x, y, w, h) in faces:
            # Resize filter to match face size
            resized_filter = cv2.resize(filter_overlay, (w, h))
            
            # Apply the filter with alpha blending
            if resized_filter.shape[2] == 4:  # Has alpha channel
                alpha = resized_filter[:, :, 3] / 255.0
                for c in range(3):
                    frame[y:y+h, x:x+w, c] = (
                        alpha * resized_filter[:, :, c] + 
                        (1 - alpha) * frame[y:y+h, x:x+w, c]
                    )
        
        return frame
    
    def apply_hologram_effect(self, frame, faces):
        """Apply a hologram effect to the entire frame"""
        # Create hologram effect
        hologram_frame = frame.copy()
        
        # Add blue tint
        blue_overlay = np.zeros_like(frame)
        blue_overlay[:, :] = (255, 100, 0)  # Blue in BGR
        hologram_frame = cv2.addWeighted(hologram_frame, 0.7, blue_overlay, 0.3, 0)
        
        # Add scan lines
        h, w = frame.shape[:2]
        for i in range(0, h, 4):
            cv2.line(hologram_frame, (0, i), (w, i), (255, 255, 255), 1)
        
        # Add noise
        noise = np.random.randint(0, 50, (h, w, 3), dtype=np.uint8)
        hologram_frame = cv2.add(hologram_frame, noise)
        
        return hologram_frame
    
    def apply_force_lightning(self, frame, faces):
        """Add Force lightning effects around faces"""
        for (x, y, w, h) in faces:
            # Create lightning effect around face
            center_x, center_y = x + w//2, y + h//2
            
            # Draw multiple lightning bolts
            for _ in range(5):
                # Random lightning path
                points = []
                current_x, current_y = center_x, center_y
                
                for step in range(10):
                    current_x += np.random.randint(-20, 21)
                    current_y += np.random.randint(-20, 21)
                    points.append((current_x, current_y))
                
                # Draw lightning
                for i in range(len(points)-1):
                    cv2.line(frame, points[i], points[i+1], (255, 255, 0), 2)
                    cv2.line(frame, points[i], points[i+1], (255, 255, 255), 1)
        
        return frame
    
    def apply_death_star_background(self, frame, faces):
        """Add Death Star in the background"""
        h, w = frame.shape[:2]
        
        # Create Death Star
        death_star_center = (w - 100, 100)
        death_star_radius = 80
        
        # Draw Death Star sphere
        cv2.circle(frame, death_star_center, death_star_radius, (100, 100, 100), -1)
        
        # Add Death Star details
        cv2.circle(frame, death_star_center, death_star_radius//3, (50, 50, 50), -1)
        cv2.circle(frame, death_star_center, death_star_radius//6, (200, 200, 200), 2)
        
        # Add laser beam effect
        laser_start = (death_star_center[0] - death_star_radius//3, death_star_center[1])
        laser_end = (50, h - 50)
        cv2.line(frame, laser_start, laser_end, (0, 0, 255), 5)
        cv2.line(frame, laser_start, laser_end, (255, 255, 255), 2)
        
        return frame
    
    def apply_vader_mask(self, frame, faces):
        """Apply Darth Vader mask effect"""
        for (x, y, w, h) in faces:
            mask_overlay = frame.copy()
            
            # Draw black mask
            cv2.rectangle(mask_overlay, (x, y + h//3), (x + w, y + h), (0, 0, 0), -1)
            
            # Draw red eyes
            eye_y = y + h//3 + 10
            eye1_x = x + w//4
            eye2_x = x + 3*w//4
            cv2.circle(mask_overlay, (eye1_x, eye_y), 8, (0, 0, 255), -1)
            cv2.circle(mask_overlay, (eye2_x, eye_y), 8, (0, 0, 255), -1)
            
            # Add breathing apparatus
            breath_y = y + 2*h//3
            cv2.rectangle(mask_overlay, (x + w//3, breath_y), (x + 2*w//3, breath_y + 20), (50, 50, 50), -1)
            
            # Blend with original
            alpha = 0.7
            frame = cv2.addWeighted(frame, 1-alpha, mask_overlay, alpha, 0)
        
        return frame
    
    def apply_stormtrooper_helmet(self, frame, faces):
        """Apply Stormtrooper helmet effect"""
        for (x, y, w, h) in faces:
            overlay = frame.copy()
            
            # White helmet base
            cv2.ellipse(overlay, (x + w//2, y + h//2), (w//2, h//2), 0, 0, 360, (255, 255, 255), -1)
            
            # Black eye areas
            eye_y = y + h//3
            eye_w = w//6
            eye_h = h//8
            cv2.ellipse(overlay, (x + w//3, eye_y), (eye_w, eye_h), 0, 0, 360, (0, 0, 0), -1)
            cv2.ellipse(overlay, (x + 2*w//3, eye_y), (eye_w, eye_h), 0, 0, 360, (0, 0, 0), -1)
            
            # Mouth area
            mouth_y = y + 2*h//3
            cv2.rectangle(overlay, (x + w//3, mouth_y), (x + 2*w//3, mouth_y + h//6), (0, 0, 0), -1)
            
            alpha = 0.6
            frame = cv2.addWeighted(frame, 1-alpha, overlay, alpha, 0)
        
        return frame
    
    def apply_yoda_ears(self, frame, faces):
        """Apply Yoda ears effect"""
        for (x, y, w, h) in faces:
            overlay = frame.copy()
            
            # Green skin tint
            face_roi = overlay[y:y+h, x:x+w]
            green_tint = np.zeros_like(face_roi)
            green_tint[:, :] = (0, 100, 0)
            overlay[y:y+h, x:x+w] = cv2.addWeighted(face_roi, 0.7, green_tint, 0.3, 0)
            
            # Large ears
            ear_w = w//4
            ear_h = h//2
            # Left ear
            cv2.ellipse(overlay, (x - ear_w//2, y + h//3), (ear_w, ear_h), 0, 0, 360, (0, 150, 0), -1)
            # Right ear
            cv2.ellipse(overlay, (x + w + ear_w//2, y + h//3), (ear_w, ear_h), 0, 0, 360, (0, 150, 0), -1)
            
            frame = overlay
        
        return frame
    
    def apply_lightsaber(self, frame, faces):
        """Add lightsaber effect"""
        h, w = frame.shape[:2]
        
        # Draw lightsaber in corner
        saber_x = w - 100
        saber_y = h - 200
        
        # Handle
        cv2.rectangle(frame, (saber_x, saber_y), (saber_x + 20, saber_y + 100), (100, 100, 100), -1)
        
        # Blade (blue lightsaber)
        cv2.rectangle(frame, (saber_x + 5, saber_y - 150), (saber_x + 15, saber_y), (255, 100, 0), -1)
        
        # Glow effect
        cv2.rectangle(frame, (saber_x + 3, saber_y - 152), (saber_x + 17, saber_y - 2), (255, 200, 100), 2)
        
        return frame
    
    def apply_sith_effect(self, frame, faces):
        """Apply Sith (dark side) effect"""
        # Red tint to entire frame
        red_overlay = np.zeros_like(frame)
        red_overlay[:, :] = (0, 0, 100)
        frame = cv2.addWeighted(frame, 0.8, red_overlay, 0.2, 0)
        
        for (x, y, w, h) in faces:
            # Glowing red eyes
            eye_y = y + h//3
            eye1_x = x + w//3
            eye2_x = x + 2*w//3
            cv2.circle(frame, (eye1_x, eye_y), 12, (0, 0, 255), -1)
            cv2.circle(frame, (eye2_x, eye_y), 12, (0, 0, 255), -1)
            cv2.circle(frame, (eye1_x, eye_y), 15, (0, 100, 255), 2)
            cv2.circle(frame, (eye2_x, eye_y), 15, (0, 100, 255), 2)
        
        return frame
    
    def apply_jedi_effect(self, frame, faces):
        """Apply Jedi (light side) effect"""
        # Blue tint to entire frame
        blue_overlay = np.zeros_like(frame)
        blue_overlay[:, :] = (100, 50, 0)
        frame = cv2.addWeighted(frame, 0.8, blue_overlay, 0.2, 0)
        
        for (x, y, w, h) in faces:
            # Peaceful blue glow around face
            cv2.ellipse(frame, (x + w//2, y + h//2), (w//2 + 10, h//2 + 10), 0, 0, 360, (255, 200, 100), 3)
        
        return frame
